import type { NextPage } from 'next'
import Head from 'next/head'
import Box from '@mui/material/Box'
import Card from '@mui/material/Card'
import Stack from '@mui/material/Stack'
import TextField from '@mui/material/TextField'
import Button from '@mui/material/Button'
import styles from '../styles/Home.module.css'
import { createUser } from '../apolloClient/query'
import { client } from '../apolloClient'
import Link from 'next/link'
import { ChangeEvent, SetStateAction, useState } from 'react'
import { useRouter } from 'next/router'

interface ITextFieldError {
  error: boolean;
  helperText: string;
};

const defaultTextFieldError: ITextFieldError = {
  error: false,
  helperText: "",
};

const Login: NextPage = () => {
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [emailError, setEmailError] = useState<ITextFieldError>(defaultTextFieldError);
  const [nameError, setNameError] = useState<ITextFieldError>(defaultTextFieldError);
  const router = useRouter();

  const createUserFunc: any = async () => {
    try {
      const res = await client.mutate({ mutation: createUser, variables: { name, email } });
      return res?.data?.createUser;
    } catch(error: any) {
      setEmailError({
        error: true,
        helperText: error.message.match("duplicate") ? "Duplicate parameters" : "Something went wrong",
      });
      return null;
    }
  };

  const handleInputChange = (event: ChangeEvent<HTMLInputElement>, stateFunc: (value: SetStateAction<string>) => void) => stateFunc(event.target.value);
  const handleBtnClick = async () => {
    setEmailError(defaultTextFieldError);
    setNameError(defaultTextFieldError);
    if (validateInput()) {
      console.log("validation passed, call the api");
      const result = await createUserFunc();

      if(result?.email === email) {
        router.push("/chats");
      }
    }
  };
  const validateInput = ():boolean => {
    if (email && name) {
      return true;
    }
    if(!email) {
      setEmailError({
        error: true,
        helperText: "enter email",
      });
    }
    if(!name) {
      setNameError({
        error: true,
        helperText: "enter name",
      });
    }
    return false;
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Register</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Card elevation={3} sx={{ mt: -8, p: 2, pb: 5, width: "300px", backgroundColor: "#fffeee" }}>
          <Stack spacing={1}>
            <h3>Register to Chat-me</h3>
            <TextField variant="standard" type="email" label="Email" error={emailError.error} helperText={emailError.helperText} value={email} onChange={(event: ChangeEvent<HTMLInputElement>) => handleInputChange(event, setEmail)} />
            <TextField variant="standard" label="Name" error={nameError.error} helperText={nameError.helperText} value={name} onChange={(event: ChangeEvent<HTMLInputElement>) => handleInputChange(event, setName)} />
            <Button variant="contained" color='info' onClick={handleBtnClick}>Register</Button>
            <Box sx={{color: "#ccc", textAlign: "center"}}><Link href="/login"><a>Login here!!!</a></Link></Box>
          </Stack>
        </Card>
      </main>
    </div>
  )
}

export default Login
